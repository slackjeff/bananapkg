#!/usr/bin/env bash
#=====================HEADER=========================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENÇA
# MIT
#
#MUDANÇAS?
# changelog.txt
#
#VERSIONAMENTO
# versions.txt
#
#SITE
# https://bananapkg.github.io
#
#VELOCIDADE, SEGURANÇA, FINO.
#====================================================================|

##########################################
#================= VARIÁVEIS ESPECIAIS
##########################################

# Desabilitando suporte a unicode
# Para melhor performance.
export LC_ALL=C
export LANG=C

export PRG='banana'
export VERSION='2.2.4.6_littlewitchbrown'
export format_pkg='mz'                   # Extensão do pacote
export descme='info/desc'                # Descrição do pacote
export local_list='var/lib/banana/list'  # Localização da lista

# Caso o usuário deixou nulo vamos
# inicializar as variáveis de configurações em modo default.
AUTO_YES="${AUTO_YES:=0}" # Desligado
GPG_SIGN="${GPG_SIGN:=1}" # Ligado

########################################
#=================== CORES
########################################

readonly red='\033[31;1m'
readonly yellow='\033[33;1m'
readonly blue='\033[34;1m'
readonly pink='\033[35;1m'
readonly cyan='\033[36;1m'
readonly white='\033[37;1m'
readonly end='\033[m'

########################################
#===============BIBLIOTECAS
########################################

# Carregando bibliotecas necessárias
# para o funcionamento do banana
heart_archives=(
    '/etc/banana/banana.conf'
    '/usr/libexec/banana/core.sh'
    '/usr/libexec/banana/help.sh'
)
for heart_load in "${heart_archives[@]}"; do
    source "$heart_load" || { echo "ERROR ON LOAD \"$heart_load\", ABORT"; exit 1 ;}
done

PKG_EXT="${PKG_EXT:='chi'}"
LFS_VARCACHE="${LFS_VARCACHE:='apt'}"
export format_pkg="$PKG_EXT"          # Extensão do pacote

#######################################
#============ DIRETÓRIOS ESPECIAIS
#######################################

dirlist='/var/lib/banana/list'       # Lista do pacote 'pack.list'
dirdesc='/var/lib/banana/desc'       # Descrição do pacote 'pack.desc'
dirremove='/var/lib/banana/remove'   # Script de remoção do pacote 'rm.sh'
dirinstalled='/var/cache/$LFS_VARCACHE/installed'
dirremoved='/var/cache/$LFS_VARCACHE/removed'

########################################
#===============TESTES
########################################

# Sem root não vai amiguinho.
[[ "$UID" -ne '0' ]] && { echo "Root is required."; exit 1 ;}

# Qual a linguagem do cabra?
if [[ "$LANG" = "pt-br" ]]; then
    HELP="_HELP_PT"
else
    HELP="_HELP_US"
fi

test -d ${dirlist}      || mkdir -p ${dirlist}
test -d ${dirdesc}      || mkdir -p ${dirdesc}
test -d ${dirremove}    || mkdir -p ${dirremove}
test -d ${dirinstalled} || mkdir -p ${dirinstalled}
test -d ${dirremoved}   || mkdir -p ${dirremoved}

# Inicializando o programa em silêncio...
 _VERBOSE '0'

# Verificando quais argumentos passados pelo usuário
# para pegar as variáveis necessárias
for entry_parameter; do
    if [[ "$entry_parameter" = '-y' ]]; then
        AUTO_YES='1'
    elif [[ "$entry_parameter" = '-v' ]] || [[ "$entry_parameter"  = 'verbose' ]]; then
        VERBOSE='1'
        _VERBOSE '1'
    elif [[ "$entry_parameter" = '-ol' ]] || [[ "$entry_parameter" = 'one-line' ]]; then
        ONE_LINE='1'
    else
        new_argument+=("$entry_parameter")
    fi
done
set -- "${new_argument[@]}" # definindo novos argumentos sem opções =)

########################################
#==================INICIO
########################################

case "$1" in
    -c|create)
       shift # Rebaixando
       _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)

       # Se nome do pacote ter espaços não deve continuar
       if [[ "$@" =~ .*[[:space:]]+.*-.* ]]; then
           echo -e "${red}[Error!]${end} Unexpected character."
           echo -e "Perfect Format name is: ${blue}Name-Version-Build.mz${end}"
           echo -e "${red}DONT USE${end} symbols, space, tab etc.. in name of package."
           echo "If you need more HELP, use -h or --help"
           exit 1
       fi

       # Se nome do pacote não for letras ou se tiver
       # espaços entre outras coisas, não pode continuar.
       _NAME_FORMAT_PKG "$1" || exit 1

       # Verificando quantos '-' existem e fazendo contagem
       # com _WC
       check_var="$(printf '%s\n' ${1//[a-zA-Z0-9._|\\()@#\!~%;:]/ })"
       check_var="$(_WC ${check_var})"
       if [[ "$check_var" -lt '2' || "$check_var" -gt '2'  ]]; then
           echo -e "${red}[Error!]${end} Unexpected ' - ' Count."
           echo -e "USE ONLY TWO ' ${red}-${end} ' In the name of your package."
           echo -e "EXAMPLE the perfect format: ${blue}leafpad${end}-${blue}2.6.8${end}-${blue}3${end}.${blue}mz${end}"
           echo -e "If you need separate name of package prefer use ' ${red}_${end} '"
           echo -e "EXAMPLE: firefox_quantum${blue}-${end}54.8.9${blue}-${end}1.mz"
           echo "If you need more HELP, use -h or --help"
           exit 1
       else
            # Verificação de tudo está aonde deveria estar, como diretório
            # (info) e o arquivo de descrição (desc)
            _VERIFY_ON "$1"
            # Iniciando processo de criação do pacote
            _CREATE_PKG "$1" || exit 1
       fi
       unset check_var
    ;;

    -g|generate)
        shift
        # Verificando se tem traços '-' a mais
        # E dando um sermão ;D

        check_var="$(printf '%s\n' ${1//[a-zA-Z0-9._|\\()@#\!~%;:]/ })"
        check_var="$(_WC ${check_var})"
        if [[ -n "$1" ]] && [[ "$check_var" -lt '2' || "$check_var" -gt '2' ]]; then
            echo -e "${red}[ERROR]${end} OPS! Could not generate file desc..."
            echo -e "The Perfect Format name is: banana -g ${blue}name-version-build${end}"
            echo "EXAMPLES:"
            echo -e "[1] banana -g ${blue}firefox_quantum${end}-${blue}57.8.9${end}-${blue}1${end}"
            echo -e "[2] banana -g ${blue}nano${end}-${blue}4.0${end}-${blue}2${end}"
            echo -e "[3] banana -g ${blue}utox${end}-${blue}10.1.4.0bc${end}-${blue}2${end}"
            echo "For more Details, man banana"
            exit 1
        elif [[ "$1" =~ .*-$ ]]; then # Termino com - ?
            echo -e "${red}[ERROR]${end} Finish with numbers."
            exit 1
        fi
        # Pegando os campos com delimitador ' - ' =)
        inc='0' # Var incremento
        for take in 'field_one' 'field_two' 'field_three'; do
            inc=$(($inc + 1))
            eval $take="$(echo "$1" | cut -d '-' -f ${inc})" # Expanda e pegue o seu devido valor
        done
        _GENERATE_DESC "$field_one" "$field_two" "$field_three" || exit 1
        unset check_var
    ;;

    -i|install) # Instalação de pacotes
        shift # Rebaixe baby
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do
            _NAME_FORMAT_PKG "$1" || exit 1 # Função de configuração de entrada!
            [[ ! -e "$1" ]] && { echo -e "${red}[ERROR]${end} Do not cheat me! This Package dont exist."; exit 1 ;}
            _VERIFY_PACK_IS_XZ "$1" || exit 1 # Pacote É comprimido com XZ?
            _INSTALL_PKG "$1"  || exit 1
             retval=${?}
            [[ $retval = 0 ]] && touch $dirinstalled/${1}
            [[ $retval = 0 ]] && rm -f $dirremoved/${1}
            shift
       done
    ;;

    -u|upgrade) # Upgrade de pacotes
        shift
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do
            _NAME_FORMAT_PKG "$1" || exit 1 # Função de configuração de entrada!
            _UPGRADE "$1" || exit 1
            shift
        done
    ;;

    update) # Update do banana
        _UPDATE_BANANA && exit 0 || exit 1
    ;;

    -r|remove)
        shift # Rebaixa baby
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =) 
        # Se contiver um dos caracteres da lista, não poderá continuar.
        [[ "$1" =~ .*(\*|@|#|,).* ]] && { echo 'Dont Use * or @ or #'; exit 1 ;}
        while [[ -n "$1" ]]; do
            _PRE_REMOVE "$1" || exit 1
            retval=${?}
            [[ $retval = 0 ]] && _pkg=($(echo $dirinstalled/${1}*| sed 's|/| |g'|awk '{print $5}'))
            [[ $retval = 0 ]] && rm -f $dirinstalled/${_pkg}
            [[ $retval = 0 ]] && touch $dirremoved/${_pkg}
            shift
        done
        exit 0
    ;;

    -s|search)
        shift # elaia, rebaixamos.
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do
            _SEARCH_PKG "$1" # Chamando função de check
            shift
        done
    ;;

    -pl|print)
        shift # rebaixo
        _INPUT_NULL_PARAMETER "$1"
        _PRINT_LIST "$1" || exit 1
    ;;

    -V|version) echo "$PRG Version $VERSION" ;;

    -h|help) "$HELP" ;;

    *) "$HELP" ;;
esac
