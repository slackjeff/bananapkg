#!/usr/bin/env bash
#=====================HEADER=========================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENÇA
# MIT
#
#MUDANÇAS?
#changelog.txt
#====================================================================|

##########################################
#================= VARIÁVEIS ESPECIAIS
##########################################

export PRG='banana'
export VERSION='2.2'
export format_pkg='mz'            # Extensão do pacote
export descme='info/desc'         # Descrição do pacote
local_list='var/lib/banana/list'  # Localização da lista

########################################
#=================== CORES
########################################

readonly red='\033[31;1m'
readonly blue='\033[34;1m'
readonly cyan='\033[36;1m'
readonly pink='\033[35;1m'
readonly end='\033[m'

########################################
#===============BIBLIOTECAS
########################################

# Configurações
source '/etc/banana/banana.conf' || { echo "ERROR ON LOAD /etc/banana/banana.conf, ABORT"; exit 1 ;}

# Módulos que fazem o programa ;)
source '/usr/libexec/banana/core.sh' || { echo "ERROR ON LOAD /var/libexec/banana/core.sh, ABORT"; exit 1 ;}

# Módulo de Ajuda;)
source '/usr/libexec/banana/help.sh' || { echo "ERROR ON LOAD /var/libexec/banana/core.sh, ABORT"; exit 1 ;}

#######################################
#============ DIRETÓRIOS ESPECIAIS
#######################################

dirlist='/var/lib/banana/list'       # Lista do pacote 'pack.list'
dirdesc='/var/lib/banana/desc'       # Descrição do pacote 'pack.desc'
dirremove='/var/lib/banana/remove'   # Script de remoção do pacote 'rm.sh'

########################################
#===============TESTES
########################################

# Sem root não vai amiguinho.
[[ "$UID" -ne '0' ]] && { echo "Root is required."; exit 1 ;}

# Qual a linguagem do cabra?
if [[ "$BANANA_LANG" = "pt-br" ]]; then
    HELP="_HELP_PT"
else
    HELP="_HELP_US"
fi

# Inicializando o programa em silêncio...
 _VERBOSE '0'
 
# Verificando quais argumentos passados pelo usuário
# para pegar as variáveis necessárias
for entry_parameter; do
    if [[ "$entry_parameter" = '-y' ]]; then
        AUTO_YES='1'
    elif [[ "$entry_parameter" = '-v' ]] || [[ "$entry_parameter"  = '--verbose' ]]; then
        VERBOSE='1'
        _VERBOSE '1'
    elif [[ "$entry_parameter" = '-ol' ]] || [[ "$entry_parameter" = '--one-line' ]]; then
        ONE_LINE='1'
    else
        new_argument+=("$entry_parameter")
    fi
done
set -- "${new_argument[@]}" # definindo novos argumentos sem opções =)



########################################
#==================INICIO
########################################

case "$1" in
    -c|create)
       shift # Rebaixando
       _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
       
       # Se nome do pacote ter espaços não deve continuar
       if [[ "$@" =~ .*[[:space:]]+.*-.* ]]; then
           echo -e "${red}[Error!]${end} Unexpected character."
           echo -e "Perfect Format name is: ${blue}Name-Version-Build.mz${end}"
           echo -e "${red}DONT USE${end} symbols, space, tab etc.. in name of package."
           echo "If you need more HELP, use -h or --help"
           exit 1
       fi
       
       # Se nome do pacote não for letras ou se tiver
       # espaços entre outras coisas, não pode continuar.
       _NAME_FORMAT_PKG "$1" || exit 1

       if [[ "$(echo "$1" | grep -o '-' | wc -l)" -gt '2' || "$(echo "$1" | grep -o '-' | wc -l)" -lt '2'  ]]; then
           echo -e "${red}[Error!]${end} Unexpected ' - ' Count."
           echo -e "USE ONLY TWO ' ${red}-${end} ' In the name of your package."
           echo -e "EXAMPLE the perfect format: ${blue}leafpad${end}-${blue}2.6.8${end}-${blue}3${end}.${blue}mz${end}"
           echo -e "If you need separate name of package prefer use ' ${red}_${end} '"
           echo -e "EXAMPLE: firefox_quantum${blue}-${end}54.8.9${blue}-${end}1.mz"
           echo "If you need more HELP, use -h or --help"
           exit 1
       else
            # Verificação de tudo está aonde deveria estar, como diretório
            # (info) e o arquivo de descrição (desc)
            _VERIFY_ON "$1"
            # Iniciando processo de criação do pacote
            _CREATE_PKG "$1" || exit 1
       fi
    ;;

    -g|generate)
	if [ $# -lt 3 ]; then
	   a=$(echo $2 |sed 's/-/ /g'| awk '{print $1}')
	   b=$(echo $2 |sed 's/-/ /g'| awk '{print $2}')
	   _GENERATE_DESC "$a" "$b" || exit 1
	else
	   _GENERATE_DESC "$2" "$3" || exit 1
        fi
    ;;

    -i|install) # Instalação de pacotes
        shift # Rebaixe baby
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do
            _NAME_FORMAT_PKG "$1" || exit 1 # Função de configuração de entrada!
            [[ ! -e "$1" ]] && { echo -e "${red}[ERROR]${end} Do not cheat me! This Package dont exist."; exit 1 ;}
            _INSTALL_PKG "$1"  || exit 1
            shift
       done
    ;;

    -u|upgrade) # Upgrade de pacotes
        shift
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do           
            _NAME_FORMAT_PKG "$1" || exit 1 # Função de configuração de entrada!
            _UPGRADE "$1" || exit 1
            shift
        done
    ;;

    update) # Update do banana
        _UPDATE_BANANA || exit 1
    ;;

    -r|remove)
        shift # Rebaixa baby
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =) 
        # Se contiver um dos caracteres da lista, não poderá continuar.
        [[ "$1" =~ .*(\*|@|#|,).* ]] && { echo 'Dont Use * or @ or #'; exit 1 ;}
        while [[ -n "$1" ]]; do
            _PRE_REMOVE "$1" || exit 1
            shift
        done
        exit 0
    ;;

    -s|search)
        shift # elaia, rebaixamos.
        _INPUT_NULL_PARAMETER "$1" # Se ta nulo o help precisa ser chamado =)
        while [[ -n "$1" ]]; do
            _SEARCH_PKG "$1" # Chamando função de check
            shift
        done
    ;;

    -V|version) echo "$PRG Version $VERSION" ;;

    -h|help) "$HELP" ;;

    *) "$HELP" ;;
esac
